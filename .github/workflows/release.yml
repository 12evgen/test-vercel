name: Create Release

on:
  workflow_dispatch:

jobs:
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        npm install
    - name: Semantic Release
      id: semantic
      uses: cycjimmy/semantic-release-action@v4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        extra_plugins: |
          @semantic-release/git
    - name: Create Release
      if: steps.semantic.outputs.new_release_published == 'true'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.semantic.outputs.new_release_version }}
        release_name: v${{ steps.semantic.outputs.new_release_version }}
        body: ${{ steps.semantic.outputs.new_release_notes }}
        draft: false
        prerelease: ${{ !!steps.semantic.outputs.new_release_channel}} # on everything but the default channel

    - name: Install Vercel CLI
      run: npm install --global vercel@latest

    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

    - name: Build project assets
      run: |
        vercel build --token=${{ secrets.VERCEL_TOKEN }}
        zip ${{ steps.semantic.outputs.new_release_version }}.zip .vercel -r
    - name: Upload Release Asset
      if: steps.semantic.outputs.new_release_published == 'true'
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ steps.semantic.outputs.new_release_version }}.zip
        asset_name: ${{ steps.semantic.outputs.new_release_version }}.zip
        asset_content_type: application/gzip
